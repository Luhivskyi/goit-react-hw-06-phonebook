{"version":3,"sources":["Components/ContactsList/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactsList/ContactsList.module.css","redux/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactsList/ContactListItem.js","Components/ContactsList/ContactList.js","Components/Filter/Filter.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","INITIAL__STATE","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","event","preventDefault","validateForm","props","onSubmitForm","resetForm","handleCheckUnique","alert","isExistContact","contacts","find","contact","this","className","s","item_form","onSubmit","item_input","type","pattern","title","required","onChange","btn_submit","Component","connect","items","dispatch","contactsActions","onRemove","actions","item_contact","item_button","onClick","filterContacts","filter","toLowerCase","includes","contact_list","map","key","filterValue","filter_envelope","item_element","placeholder","App","createReducer","some","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e524d100.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_contact\":\"ContactListItem_item_contact__NeMvd\",\"item_button\":\"ContactListItem_item_button__2jorU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_element\":\"Filter_item_element__3PR7m\",\"filter_envelope\":\"Filter_filter_envelope__1Liqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactsList_contact_list__lJeHe\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","/* eslint-disable no-unused-vars */\r\nimport { Component } from 'react';\r\nimport s from './ContactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\n// import { v4 as uuid } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts-actions';\r\n\r\nconst INITIAL__STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }).isRequired,\r\n    ),\r\n    onSubmitForm: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = INITIAL__STATE;\r\n\r\n  handleChangeForm = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const isValidatedForm = this.validateForm();\r\n    if (!isValidatedForm) return;\r\n    this.props.onSubmitForm(name, number);\r\n\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    if (!name || !number) {\r\n      alert('Some fild is empty');\r\n      return false;\r\n    }\r\n\r\n    return this.handleCheckUnique(name);\r\n  };\r\n\r\n  handleCheckUnique = name => {\r\n    const { contacts } = this.props;\r\n    const isExistContact = contacts.find(contact => contact.name === name);\r\n\r\n    isExistContact && alert('Contact is already exist');\r\n    this.resetForm();\r\n    return !isExistContact;\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={s.item_form} onSubmit={this.handleFormSubmit}>\r\n        <input\r\n          className={s.item_input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={name}\r\n        />\r\n\r\n        <input\r\n          className={s.item_input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={number}\r\n        />\r\n\r\n        <button className={s.btn_submit} type=\"submit\">\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmitForm: (name, number) =>\r\n    dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport s from './ContactListItem.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport actions from '../../redux/contacts-actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={s.item_contact}>\r\n      {name}: {number}{' '}\r\n      <button className={s.item_button} onClick={() => onRemove(id)}>\r\n        delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport s from './ContactsList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ContactsList = ({ contacts }) => {\r\n  return (\r\n    <ul className={s.contact_list}>\r\n      {contacts.map(contact => (\r\n        <ContactListItem {...contact} key={contact.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst filterContacts = (items, filter) => {\r\n  return items.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: filterContacts(items, filter),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactsList);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport s from './Filter.module.css';\r\n\r\nimport actions from '../../redux/contacts-actions';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <div className={s.filter_envelope}>\r\n      <input\r\n        className={s.item_element}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={event => onChange(event.target.value)}\r\n        placeholder=\"Enter name for Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: filterValue => dispatch(actions.changeFilter(filterValue)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactsList from './Components/ContactsList';\r\nimport Filter from './Components/Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <h2> Form Contact</h2>\r\n      <ContactForm />\r\n      <h2> Contacts</h2>\r\n      <ContactsList />\r\n\r\n      <h3> Find contacts by name</h3>\r\n      <Filter />\r\n    </>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst defaultState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst items = createReducer([...defaultState], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const isValidate = state.some(contact => contact.name === payload.name);\r\n    if (!isValidate) {\r\n      return [...state, payload];\r\n    }\r\n    alert(`${payload.name} is already in contacts`);\r\n    return state;\r\n  },\r\n\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\nimport {\r\n  persistReducer,\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_form\":\"ContactForm_item_form__3p5X4\",\"item_input\":\"ContactForm_item_input__-9Ww8\",\"btn_submit\":\"ContactForm_btn_submit__h8ZWu\"};"],"sourceRoot":""}